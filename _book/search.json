[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"","code":""},{"path":"projects.html","id":"projects","chapter":"Projects","heading":"Projects","text":"","code":""},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"blog-with-hugo-netlify-cms-zapier","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1 Blog with Hugo, Netlify CMS & Zapier","text":"project going build blog using Hugo Static Site Generator, deploy Netlify hosting provider. blog complete live Netlify, integrate Zapier trigger automatic deploys/builds site. allow us write blog posts ahead time setting publish date time future Zapier notify Netlify build site entire process automated.","code":""},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"installing-hugo","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.1 Installing Hugo","text":"Hugo written Go Programming Language makes easy install, since just single binary. install Hugo, head Installation Docs follow along whatever operating system using. personally using Mac installed Hugo Homebrew. highly recommend using Homebrew Mac.","code":""},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"creating-the-blog","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.2 Creating the blog","text":"Now Hugo installed, run following command create new hugo site:like , probably already directory web/code projects live computer. folder called Projects computer contains projects. recommend something similar machine install .going using pre-configured theme Hugo called Ink. can\ndownload theme Github . Click Green button called ‚ÄúCode‚Äù\n‚ÄúDownload Zip.‚Äùdownload zip file unzip , likely called hugo-ink-master simply rename folder ink move inside themes folder.hugo project now look like :Ink Directory listingInside ink theme folder another folder called exampleSite. contains example content can use temporarily populate site pages posts.Copy directory themes/ink/exampleSite/archetypes/ replace /archetypes/ located root project .Copy directory themes/ink/exampleSite/content/ replace /content/ located root project .Copy directory themes/ink/exampleSite/data/ replace /data/ located root project .Copy file themes/ink/exampleSite/config.toml replace config.toml located root project .Now run following command terminal start hugo server:everything configured setup properly, see following http://localhost:1313/Harbor Home PageYour site might white background fine, theme light dark themes toggled based upon system preferences.","code":"hugo new site blog\n\n# blog will be the name of the folder and projecthugo serve"},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"instant-reload-creating-new-posts","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.3 Instant Reload & Creating new posts","text":"Hugo‚Äôs built dev server automatically reload page whenever detects page. can see action modifying one posts located content/posts/. make changes one files, browser reload update changes virtually instantly! Pretty sweet right üòécreate new post, either stop hugo server, open another terminal window project directory run following command.Feel free name file whatever like. file created, need modify known Front Matter top file.open one sample posts see something like following top:known Front Matter. data Hugo uses generate various data site. data example fairly self-explanatory, title title post, date date wrote post, description description post, tags categories act ways tagging categorizing various posts together site.entirely customizable . correct theme config modifications, can Hugo parse use kinds custom data located Front Matter.Take example used paste new post. give us ‚Äúskeleton‚Äù work .post looks like:homepage updated latest post look something like :New post home page","code":"hugo new posts/my-first-post.md---\ntitle: 'Markdown Syntax Guide'\ndate: '2019-03-11'\ndescription: 'Sample article showcasing basic Markdown syntax.'\ntags: [markdown, css, html, themes]\ncategories: [themes, syntax]\n------\ntitle: 'My First Post'\ndate: '2020-12-12'\ndescription: 'This is the description of my first post'\ntags: [markdown]\ncategories: [syntax]\n---\n\nContent goes here..."},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"pushing-our-project-to-github","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.4 Pushing our project to GitHub","text":"can deploy site, need first push site GitHub.GitHub account, please sign free account going need throughout course.GitHub may dark like mine, using dark theme, enabled default.Create new repository clicking + upper right hand corner , next bell icon, ‚ÄúNew repository‚ÄùGitHub create new repositoryFill repository name description field choose whether make repo private public. doesn‚Äôt matter one choose. Netlify work public private repos.GitHub create repo screenThen click green button ‚ÄúCreate repository‚Äùpresented screen looks similar :GitHub empty repo screenThis next section requires Git installed. Git installed, can download hereHead back terminal inside hugo directory run following, order.going need copy url git repo GitHub. located section empty\nGitHub repo.GitHub empty repo instructionsPaste terminal::Refresh GitHub see following:GitHub repo pushedNow set ready deploy Netlify","code":"git init # initializes a new git repository\ngit add . # adds all of the files to git\ngit commit -m \"init commit\" # creates a new commit with the message \"init commit\"git remote add origin git@github.com:robertguss/hugo-blog.gitgit push -u origin master"},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"deploying-to-netlify","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.5 Deploying to Netlify","text":"Now site setup running, let‚Äôs learn deploy static site \nNetlify. Netlify free one popular hosting providers Jamstack. Head site sign account, Use GitHub account sign .sign , land dashboard looks like following:Netlify DashboardClick ‚ÄúNew site Git‚Äù button.next screen, click ‚ÄúGitHub‚Äù buttonNetlify Connect Git ProviderYou want connect GitHub account Netlify give access repos.need seach repo just created select . named mine hugo-blog can easily seach search bar.Netlify Pick repositoryIt automatically detect Hugo project fill form fields . Just case doesn‚Äôt, build command hugo publish directory public.Netlify Deploy SettingsThe click green button ‚ÄúDeploy site‚Äùtaken back site dashboard site begin deploy. shouldn‚Äôt take long see random url top.Netlify Site Deployed DashboardClick green url take new Hugo site!Broken SiteWait!?! site broken?inspect site using Chrome dev tools open console can see mixed content warnings reference http://example.org. url coming ?Broken Site Dev ConsoleIf open config.toml see following line 1:Change following:need add changes git push GitHub.change pushed GitHub, Netlify automatically detect change begin redeploy site. ci/cd comes free Netlify us setup configure anything! just push master branch Netlify takes care rest.refresh Netlify url, site fixed.Netlify Site Fixed","code":"baseURL = \"http://example.org/\"baseURL = \"/\"git add .\ngit commit -m \"fixed base url in config.toml\"\ngit push"},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"integrating-netlify-cms","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.6 Integrating Netlify CMS","text":"Now blog setup deployed live Netlify, now integrate Netlify CMS allow us update content easily. can find docs installation & setup .First, need create admin folder CMS live. Since using Hugo, need create folder inside /static. folder currently exist, create new folder called static root project within another folder called admin.Within /static/admin folder create 2 new files: index.html & config.yml.Netlify CMS Admin FolderOpen static/admin/index.html add following:within static/admin/config.yml add following:Next need add collections: property config.yml let CMS know structure posts. collections can little complicated first, lots fields CMS works . can find details docs .blog, add following config.yml.entire file look like :Finally need let Netlify CMS know put images upload. can adding following config.entire file now look like:Now let‚Äôs push changes latest code Netlify.Next, let‚Äôs setup Netlify Identity Netlify‚Äôs built authentication service can log cms.Netlify IdentityWithin Netlify site‚Äôs dashboard, click Site settings top adn Identity left sidebar. click Green ‚ÄúEnable Identity‚Äù button.Netlify Registration PreferencesYou can leave ‚ÄúOpen‚Äù radio button selected now click ‚ÄúSave‚ÄùNetlify Registration Preferences OpenScroll towards bottom page click ‚ÄúEnable Git Gateway‚Äù ‚ÄúServices‚Äù heading.Netlify Enable Git Gateway","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Content Manager<\/title>\n  <\/head>\n  <body>\n    <!-- Include the script that builds the page and powers Netlify CMS -->\n    <script src=\"https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js\"><\/script>\n  <\/body>\n<\/html>backend:\n  name: git-gatewaycollections: # A list of collections the CMS should be able to edit\n  - name: 'post' # Used in routes, ie.: /admin/collections/:slug/edit\n    label: 'Post' # Used in the UI, ie.: \"New Post\"\n    folder: 'content/posts' # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields each document in this collection have\n      - { label: 'Title', name: 'title', widget: 'string' }\n      - { label: 'Publish Date', name: 'date', widget: 'datetime' }\n      - { label: 'Description', name: 'description', widget: 'text' }\n      - { label: 'Body', name: 'body', widget: 'markdown' }\n      - { label: 'Tags', name: 'tags', widget: 'list' }\n      - { label: 'Categories', name: 'categories', widget: 'list' }backend:\n  name: git-gateway\n\ncollections: # A list of collections the CMS should be able to edit\n  - name: 'post' # Used in routes, ie.: /admin/collections/:slug/edit\n    label: 'Post' # Used in the UI, ie.: \"New Post\"\n    folder: 'content/posts' # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields each document in this collection have\n      - { label: 'Title', name: 'title', widget: 'string' }\n      - { label: 'Publish Date', name: 'date', widget: 'datetime' }\n      - { label: 'Description', name: 'description', widget: 'text' }\n      - { label: 'Body', name: 'body', widget: 'markdown' }\n      - { label: 'Tags', name: 'tags', widget: 'list' }\n      - { label: 'Categories', name: 'categories', widget: 'list' }media_folder: 'static/images/uploads' # Folder where user uploaded files should go\npublic_folder: '/images/uploads'backend:\n  name: git-gateway\n\nmedia_folder: 'static/images/uploads' # Folder where user uploaded files should go\npublic_folder: '/images/uploads'\n\ncollections: # A list of collections the CMS should be able to edit\n  - name: 'post' # Used in routes, ie.: /admin/collections/:slug/edit\n    label: 'Post' # Used in the UI, ie.: \"New Post\"\n    folder: 'content/posts' # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields each document in this collection have\n      - { label: 'Title', name: 'title', widget: 'string' }\n      - { label: 'Publish Date', name: 'date', widget: 'datetime' }\n      - { label: 'Description', name: 'description', widget: 'text' }\n      - { label: 'Body', name: 'body', widget: 'markdown' }\n      - { label: 'Tags', name: 'tags', widget: 'list' }\n      - { label: 'Categories', name: 'categories', widget: 'list' }git add .\ngit commit -m \"installed Netlify CMS\"\ngit push"},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"netlify-identity-widget","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.6.1 Netlify Identity Widget","text":"Next need install Netlify Identity Widget allow us interact Netlify Identity authentication logging CMS.Add script include <head> section /static/admin/index.html:entire file /static/admin/index.html look like :Now need install <head> hugo static site included every page. Paste inside <head> /themes/ink/layouts/partials/header.html.entire file look like now:final step include simple JS snippet Netlify provides us install docs. handle redirection CMS admin dashboard upon successfully logging .Add following snippet /themes/ink/layouts/partials/footer.html.entire file now look like:Now let‚Äôs push changes:Now navigate Netlify url add /admin end. instance mine \nhttps://reverent-liskov-4cbe35.netlify.app/admin.Netlify Identity LoginClick ‚ÄúLogin Netlify Identity‚Äù button.click ‚ÄúSign ‚Äù tab fill form click ‚ÄúSign ‚Äù button._*Make sure use actual email address need click link confirm identity.**_Netlify Identity SignupOpen email sent confirm email address. now logged presented CMS admin dashboard.Netlify CMS DashboardYou can now edit create new posts Netlify CMS!Open one posts edit content click ‚ÄúPublish‚Äù button upper right hand corner. click ‚ÄúPublish Now‚ÄùNetlify CMS Publish ButtonClicking button send webhook Netlify begin build deploy site automatically. Pretty slick üòéOne thing keep mind, publish site via CMS, Netlify creating git commits background. make changes site locally afterwards, make sure run git pull pull latest changes form repo, otherwise local copy version GitHub sync.","code":"<script src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\"><\/script><!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Content Manager<\/title>\n    <script src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\"><\/script>\n  <\/head>\n  <body>\n    <!-- Include the script that builds the page and powers Netlify CMS -->\n    <script src=\"https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js\"><\/script>\n  <\/body>\n<\/html><head>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  {{- $title := ( .Title ) -}} {{- $siteTitle := ( .Site.Title ) -}} {{- if\n  .IsHome -}}\n  <title>\n    {{ $siteTitle }} {{ if isset .Site.Params \"subtitle\" }}- {{\n    .Site.Params.Subtitle }}{{ end }}\n  <\/title>\n  {{- else -}}\n  <title>{{ $title }} - {{ $siteTitle }}<\/title>\n  {{- end -}} {{- if isset .Site.Params \"favicon\" -}}\n  <link rel=\"icon\" type=\"image/png\" href=\"{{\" .Site.Params.favicon }} />\n  {{- end -}}\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  {{ with .OutputFormats.Get \"rss\" -}} {{ printf `\n  <link rel=\"%s\" type=\"%s\" href=\"%s\" title=\"%s\" />\n  ` .Rel .MediaType.Type .Permalink $.Site.Title | safeHTML }} {{ end -}} {{-\n  template \"_internal/schema.html\" . -}} {{- template \"_internal/opengraph.html\"\n  . -}} {{- template \"_internal/twitter_cards.html\" . -}}\n  <link\n    href=\"https://fonts.googleapis.com/css?family=Playfair+Display:700\"\n    rel=\"stylesheet\"\n    type=\"text/css\"\n  />\n  <link\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    media=\"screen\"\n    href=\"{{ .Site.BaseURL }}css/normalize.css\"\n  />\n  <link\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    media=\"screen\"\n    href=\"{{ .Site.BaseURL }}css/main.css\"\n  />\n  {{- if isset .Site.Params \"customcss\" }}\n  <link\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    href=\"{{ .Site.BaseURL }}{{ .Site.Params.customCSS }}\"\n  />\n  {{ end }}\n\n  <link\n    id=\"dark-scheme\"\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    href=\"{{ .Site.BaseURL }}css/dark.css\"\n  />\n  {{- if isset .Site.Params \"customdarkcss\" }}\n  <link\n    id=\"dark-scheme\"\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    href=\"{{ .Site.BaseURL }}{{ .Site.Params.customDarkCSS }}\"\n  />\n  {{- end }} {{ if and (isset .Site.Params \"social\") (isset .Site.Params\n  \"feathericonscdn\") (eq .Site.Params.featherIconsCDN true) -}}\n  <script src=\"https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js\"><\/script>\n  {{- else if or (isset .Site.Params \"social\") (eq .Site.Params.mode \"auto\") (eq\n  .Site.Params.mode \"dark\") -}}\n  <script src=\"{{ .Site.BaseURL }}js/feather.min.js\"><\/script>\n  {{ end }}\n  <script src=\"{{ .Site.BaseURL }}js/main.js\"><\/script>\n  {{- if isset .Site.Params \"customjs\" -}} {{- range .Site.Params.customJS }}\n  <script src=\"{{ $.Site.BaseURL }}{{ . }}\"><\/script>\n  {{- end }} {{- end }}\n  <script src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\"><\/script>\n<\/head><script>\n  if (window.netlifyIdentity) {\n    window.netlifyIdentity.on('init', (user) => {\n      if (!user) {\n        window.netlifyIdentity.on('login', () => {\n          document.location.href = '/admin/';\n        });\n      }\n    });\n  }\n<\/script><div class=\"footer wrapper\">\n  <nav class=\"nav\">\n    <div>\n      {{ dateFormat \"2006\" now }} {{ with .Site.Copyright }} {{ . | safeHTML }}\n      | {{ end }} <a href=\"https://github.com/knadh/hugo-ink\">Ink<\/a> theme on\n      <a href=\"https://gohugo.io\">Hugo<\/a>\n    <\/div>\n  <\/nav>\n<\/div>\n\n{{ template \"_internal/google_analytics_async.html\" . }} {{- with\n.Site.Params.Social -}}\n<script>\n  feather.replace();\n<\/script>\n{{- end -}}\n\n<script>\n  if (window.netlifyIdentity) {\n    window.netlifyIdentity.on('init', (user) => {\n      if (!user) {\n        window.netlifyIdentity.on('login', () => {\n          document.location.href = '/admin/';\n        });\n      }\n    });\n  }\n<\/script>git add .\ngit commit -m \"added Netlify Identity\"\ngit push"},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"integrating-zapier-for-automatic-deploys","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.7 Integrating Zapier for automatic deploys","text":"learned neat trick Flavio Copes. can check post hereThis next section includes using service known Zapier, automation framework, utilize automatically deploy site. may wondering need use case. Let explain.often people write blog articles advance schedule publish date sometime future. instance, may want publish new blog post every 2 weeks, month, often several articles ready go ‚Äúbuffer‚Äù content write . Virtually every blogging system cms allows traditional monolithic architecture like WordPress similar. However, since static site backend, can accomplish ? key use Zapier Hugo‚Äôs publish date.Hugo feature built already, date set one articles future, build page date. example, set date two weeks today, Hugo build page . can trigger many builds site want article show two weeks today.Knowing , can use Zapier send webhook Netlify whatever interval want trigger new build. publishing every two weeks, can setup Zapier send webhook every 2 weeks. even Zapier send webhook every single day schedule inconsistent. way worry setting correct date articles front-matter deployment publishing cycle handled automatically!tutorial, going setting Zapier send webhook every single day.can setup Zapier, however, need first configure Netlify accept Webhook Zapier.","code":""},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"netlify-webhook-setup","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.7.1 Netlify Webhook Setup","text":"Head back Netlify dashboard click ‚ÄúSite settings‚Äù ‚ÄúBuild & deploy‚Äù left sidebar. Scroll see ‚ÄúBuild hooks‚Äù section.Netlify Build HooksClick ‚ÄúAdd build hook‚Äù button.Give hook name save .Netlify Build Hook NameNetlify give url webhook, like :Netlify Build Hook UrlCopy keep tab open need Url Zapier.","code":""},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"zapier-webhook-setup","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.7.2 Zapier Webhook Setup","text":"Head Zapier create free account. logged , Go link see configure webhook POST request.Zapier Webhook PostClick ‚ÄúTry ‚Äù button.next screen, setup mine trigger weekends 7am.Zapier Webhook PostAfter clicking ‚ÄúSave Continue,‚Äù click ‚ÄúTest Trigger‚Äù button.Zapier Test TriggerThen click 2nd section add url Netlify. set payload type ‚ÄúRaw‚ÄùZapier Post SetupYou can leave rest fields click ‚ÄúSave continue‚Äùpresented ‚ÄúTest action‚Äù screen. Click ‚ÄúTest & Continue‚Äù button.Zapier Test ActionIf goes well see following.Zapier Test SuccessThen click ‚ÄúTurn Zap‚Äù button enable .Head back Netlify dashboard see deploy triggered. Click ‚ÄúDeploys‚Äù top screen check see latest deploy . say something like ‚ÄúDeploy triggered hook: Zapier 7am‚ÄùNetlify Hook SuccessSo now Zapier send webhook 7am every single day Netlify deploy fresh copy site time. enter date articles front-matter like article published live site rest handle automatically!","code":""},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"github-repo","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.8 GitHub Repo","text":"completed project can found inside Hugo-Blog/final\nGitHub Repo","code":""},{"path":"blog-with-hugo-netlify-cms-zapier.html","id":"wrap-up","chapter":"1 Blog with Hugo, Netlify CMS & Zapier","heading":"1.9 Wrap up","text":"tutorial learned create Jamstack site using Hugo static site generator. also integrated Netlify CMS make easy update content deployed site Netlify. Finally, setup Zapier trigger automatic deploys Netlify every day.","code":""}]
