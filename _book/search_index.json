[["index.html", "A Minimal Book Example Chapter 1 Prerequisites", " A Minimal Book Example Yihui Xie 2020-12-30 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc‚Äôs Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 4. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],["literature.html", "Chapter 3 Literature", " Chapter 3 Literature Here is a review of existing methods. "],["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References "],["project-blog-with-hugo-netlify-cms-zapier.html", "Chapter 7 Project - Blog with Hugo, Netlify CMS &amp; Zapier 7.1 Installing Hugo 7.2 Creating the blog 7.3 Instant Reload &amp; Creating new posts 7.4 Pushing our project to GitHub 7.5 Deploying to Netlify 7.6 Integrating Netlify CMS 7.7 Integrating Zapier for automatic deploys 7.8 GitHub Repo 7.9 Wrap up", " Chapter 7 Project - Blog with Hugo, Netlify CMS &amp; Zapier In this project we are going to build a blog using the Hugo Static Site Generator, which we will then deploy to Netlify as our hosting provider. Once our blog is complete and live on Netlify, we will then integrate Zapier to trigger automatic deploys/builds of our site. This will allow us to write blog posts ahead of time by setting a publish date some time in the future and then Zapier will notify Netlify to build our site so that the entire process is automated. 7.1 Installing Hugo Hugo is written in the Go Programming Language which makes it very easy to install, since it is just a single binary. To install Hugo, head over to their Installation Docs and follow along for whatever operating system you are using. I personally am using Mac and have installed Hugo with Homebrew. I highly recommend using Homebrew if you are on a Mac. 7.2 Creating the blog Now that you have Hugo installed, run the following command to create a new hugo site: hugo new site blog # blog will be the name of the folder and project If you are like me, you probably already have a directory where all of your web/code projects live on your computer. I have a folder called Projects on my computer which contains all of my projects. I recommend you have something similar on your machine and install it there. We are going to be using a pre-configured theme for Hugo called Ink. You can download the theme from Github here. Click on the Green button called ‚ÄúCode‚Äù and then ‚ÄúDownload Zip.‚Äù Ink GitHub Download When you download the zip file and unzip it, it will most likely be called hugo-ink-master simply rename the folder to ink and then move it inside of the themes folder. Your hugo project should now look like this: Ink Directory listing Inside of the ink theme folder is another folder called exampleSite. This contains some example content which we can use to temporarily populate our site with some pages and posts. Copy the directory themes/ink/exampleSite/archetypes/ and replace /archetypes/ located at the root of the project with it. Copy the directory themes/ink/exampleSite/content/ and replace /content/ located at the root of the project with it. Copy the directory themes/ink/exampleSite/data/ and replace /data/ located at the root of the project with it. Copy the file themes/ink/exampleSite/config.toml and replace config.toml located at the root of the project with it. Now run the following command in your terminal to start the hugo server: hugo serve If everything is configured and setup properly, you should see the following at http://localhost:1313/ Harbor Home Page Your site might have a white background which is fine, this theme has both light and dark themes which are toggled based upon your system preferences. 7.3 Instant Reload &amp; Creating new posts Hugo‚Äôs built in dev server will automatically reload the page whenever it detects a page. You can see this in action by modifying one of the posts located at content/posts/. If you make any changes to one of these files, the browser will reload and update with your changes virtually instantly! Pretty sweet right üòé To create a new post, you will either have to stop the hugo server, or open up another terminal window in the project directory and run the following command. hugo new posts/my-first-post.md Feel free to name the file whatever you like. Once this file is created, you will need to modify what is known as the Front Matter at the top of the file. If you open up one of the sample posts you will see something like the following at the top: --- title: &#39;Markdown Syntax Guide&#39; date: &#39;2019-03-11&#39; description: &#39;Sample article showcasing basic Markdown syntax.&#39; tags: [markdown, css, html, themes] categories: [themes, syntax] --- This is what is known as Front Matter. This data is what Hugo uses to generate various data on our site. The data in the example above is fairly self-explanatory, the title is the title of our post, the date is the date we wrote our post, the description is the description of our post, the tags and categories act as ways of tagging or categorizing various posts together on our site. This is all entirely customizable by you. With the correct theme and config modifications, you can have Hugo parse and use all kinds of custom data located in the Front Matter. Take the example I used above and paste it into your new post. This will give us a ‚Äúskeleton‚Äù to work with. Here is what my post looks like: --- title: &#39;My First Post&#39; date: &#39;2020-12-12&#39; description: &#39;This is the description of my first post&#39; tags: [markdown] categories: [syntax] --- Content goes here... The homepage should have been updated with your latest post and should look something like this: New post on the home page 7.4 Pushing our project to GitHub Before we can deploy our site, we need to first push our site up to GitHub. If you do not have a GitHub account, please sign up for a free account as you are going to need it throughout this course. Your GitHub may not be dark like mine, I am using their dark theme, which is not enabled by default. Create a new repository by clicking the + in the upper right hand corner , next to the bell icon, then ‚ÄúNew repository‚Äù GitHub create new repository Fill out the repository name and description field and choose whether or not to make the repo private or public. It doesn‚Äôt matter which one you choose. Netlify will work with both public and private repos. GitHub create repo screen Then click the green button ‚ÄúCreate repository‚Äù You should then be presented with a screen that looks similar to this: GitHub empty repo screen This next section requires you to have Git installed. If you do not have Git installed, you can download it here Head back over to your terminal inside of your hugo directory and run the following, in this order. git init # initializes a new git repository git add . # adds all of the files to git git commit -m &quot;init commit&quot; # creates a new commit with the message &quot;init commit&quot; Then you are going to need to copy the url for your git repo in GitHub. It is located in this section of your empty GitHub repo. GitHub empty repo instructions Paste it into your terminal: git remote add origin git@github.com:robertguss/hugo-blog.git Then do: git push -u origin master Refresh GitHub and you should see the following: GitHub repo pushed Now you are all set and ready to deploy with Netlify 7.5 Deploying to Netlify Now that our site is all setup and running, let‚Äôs learn how to deploy our static site to Netlify. Netlify is free and is one of the most popular hosting providers for the Jamstack. Head on over to their site and sign up for an account, Use your GitHub account to sign up. Once you sign up, you should land on a dashboard which looks like the following: Netlify Dashboard Click on the ‚ÄúNew site from Git‚Äù button. On the next screen, click on the ‚ÄúGitHub‚Äù button Netlify Connect to Git Provider You will want to connect your GitHub account to Netlify and give them access to all of your repos. You will then need to seach for the repo we just created and select it. I named mine hugo-blog so I can easily seach for it in the search bar. Netlify Pick a repository It should automatically detect that this is a Hugo project and fill in the form fields for you. Just in case it doesn‚Äôt, the build command is hugo and the publish directory is public. Netlify Deploy Settings The click the green button ‚ÄúDeploy site‚Äù You should then be taken back to the site dashboard where the site will begin to deploy. It shouldn‚Äôt take very long before you see a random url at the top. Netlify Site Deployed Dashboard Click on the green url and it should take you to our new Hugo site! Broken Site Wait!?! Why is our site broken? If we inspect our site using Chrome dev tools and open up the console we can see we have some mixed content warnings and a reference to http://example.org. Where is this url coming from? Broken Site Dev Console If you open up config.toml you will see the following on line 1: baseURL = &quot;http://example.org/&quot; Change it to the following: baseURL = &quot;/&quot; We will need to add these changes to git and push them up to GitHub. git add . git commit -m &quot;fixed base url in config.toml&quot; git push Once our change has been pushed up to GitHub, Netlify will automatically detect this change and begin to redeploy our site. This ci/cd all comes for free from Netlify with out us having to setup and configure anything! We just push to your master branch and Netlify takes care of the rest. If you refresh your Netlify url, the site should be fixed. Netlify Site Fixed 7.6 Integrating Netlify CMS Now that we have our blog setup and deployed live on Netlify, we will now integrate Netlify CMS which allow us to update our content more easily. You can find the docs for the installation &amp; setup here. First, we need to create an admin folder which is where the CMS will live. Since we are using Hugo, we need to create this folder inside of /static. This folder does not currently exist, so create a new folder called static in the root of the project and then within that another folder called admin. Within the /static/admin folder create 2 new files: index.html &amp; config.yml. Netlify CMS Admin Folder Open up static/admin/index.html and add the following: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Content Manager&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Include the script that builds the page and powers Netlify CMS --&gt; &lt;script src=&quot;https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Then within static/admin/config.yml add the following: backend: name: git-gateway Next we need to add a collections: property to our config.yml which will let the CMS know about the structure for our posts. The collections can be a little complicated at first, as there are lots of fields that the CMS works with. You can find out more details about them in the docs here. For our blog, add the following to config.yml. collections: # A list of collections the CMS should be able to edit - name: &#39;post&#39; # Used in routes, ie.: /admin/collections/:slug/edit label: &#39;Post&#39; # Used in the UI, ie.: &quot;New Post&quot; folder: &#39;content/posts&#39; # The path to the folder where the documents are stored create: true # Allow users to create new documents in this collection fields: # The fields each document in this collection have - { label: &#39;Title&#39;, name: &#39;title&#39;, widget: &#39;string&#39; } - { label: &#39;Publish Date&#39;, name: &#39;date&#39;, widget: &#39;datetime&#39; } - { label: &#39;Description&#39;, name: &#39;description&#39;, widget: &#39;text&#39; } - { label: &#39;Body&#39;, name: &#39;body&#39;, widget: &#39;markdown&#39; } - { label: &#39;Tags&#39;, name: &#39;tags&#39;, widget: &#39;list&#39; } - { label: &#39;Categories&#39;, name: &#39;categories&#39;, widget: &#39;list&#39; } The entire file should look like this: backend: name: git-gateway collections: # A list of collections the CMS should be able to edit - name: &#39;post&#39; # Used in routes, ie.: /admin/collections/:slug/edit label: &#39;Post&#39; # Used in the UI, ie.: &quot;New Post&quot; folder: &#39;content/posts&#39; # The path to the folder where the documents are stored create: true # Allow users to create new documents in this collection fields: # The fields each document in this collection have - { label: &#39;Title&#39;, name: &#39;title&#39;, widget: &#39;string&#39; } - { label: &#39;Publish Date&#39;, name: &#39;date&#39;, widget: &#39;datetime&#39; } - { label: &#39;Description&#39;, name: &#39;description&#39;, widget: &#39;text&#39; } - { label: &#39;Body&#39;, name: &#39;body&#39;, widget: &#39;markdown&#39; } - { label: &#39;Tags&#39;, name: &#39;tags&#39;, widget: &#39;list&#39; } - { label: &#39;Categories&#39;, name: &#39;categories&#39;, widget: &#39;list&#39; } Finally we need to let Netlify CMS know where to put our images that we upload. We can do so by adding the following to our config. media_folder: &#39;static/images/uploads&#39; # Folder where user uploaded files should go public_folder: &#39;/images/uploads&#39; The entire file should now look like: backend: name: git-gateway media_folder: &#39;static/images/uploads&#39; # Folder where user uploaded files should go public_folder: &#39;/images/uploads&#39; collections: # A list of collections the CMS should be able to edit - name: &#39;post&#39; # Used in routes, ie.: /admin/collections/:slug/edit label: &#39;Post&#39; # Used in the UI, ie.: &quot;New Post&quot; folder: &#39;content/posts&#39; # The path to the folder where the documents are stored create: true # Allow users to create new documents in this collection fields: # The fields each document in this collection have - { label: &#39;Title&#39;, name: &#39;title&#39;, widget: &#39;string&#39; } - { label: &#39;Publish Date&#39;, name: &#39;date&#39;, widget: &#39;datetime&#39; } - { label: &#39;Description&#39;, name: &#39;description&#39;, widget: &#39;text&#39; } - { label: &#39;Body&#39;, name: &#39;body&#39;, widget: &#39;markdown&#39; } - { label: &#39;Tags&#39;, name: &#39;tags&#39;, widget: &#39;list&#39; } - { label: &#39;Categories&#39;, name: &#39;categories&#39;, widget: &#39;list&#39; } Now let‚Äôs push up our changes to that our latest code is on Netlify. git add . git commit -m &quot;installed Netlify CMS&quot; git push Next, let‚Äôs setup Netlify Identity which is Netlify‚Äôs built in authentication service so that we can log into our cms. Netlify Identity Within your Netlify site‚Äôs dashboard, click on Site settings at the top adn then Identity on the left sidebar. Then click on the Green ‚ÄúEnable Identity‚Äù button. Netlify Registration Preferences You can leave the ‚ÄúOpen‚Äù radio button selected for now and click ‚ÄúSave‚Äù Netlify Registration Preferences Open Scroll down towards the very bottom of the page and click on ‚ÄúEnable Git Gateway‚Äù under the ‚ÄúServices‚Äù heading. Netlify Enable Git Gateway 7.6.1 Netlify Identity Widget Next we need to install the Netlify Identity Widget which is what will allow us to interact with Netlify Identity for authentication and logging into the CMS. Add this script include to the &lt;head&gt; section of /static/admin/index.html: &lt;script src=&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;&gt;&lt;/script&gt; The entire file /static/admin/index.html should look like this: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Content Manager&lt;/title&gt; &lt;script src=&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Include the script that builds the page and powers Netlify CMS --&gt; &lt;script src=&quot;https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Now we need to install this to the &lt;head&gt; of our hugo static site so that it is included on every page. Paste inside of the &lt;head&gt; of /themes/ink/layouts/partials/header.html. That entire file should look like this now: &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; {{- $title := ( .Title ) -}} {{- $siteTitle := ( .Site.Title ) -}} {{- if .IsHome -}} &lt;title&gt; {{ $siteTitle }} {{ if isset .Site.Params &quot;subtitle&quot; }}- {{ .Site.Params.Subtitle }}{{ end }} &lt;/title&gt; {{- else -}} &lt;title&gt;{{ $title }} - {{ $siteTitle }}&lt;/title&gt; {{- end -}} {{- if isset .Site.Params &quot;favicon&quot; -}} &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;{{&quot; .Site.Params.favicon }} /&gt; {{- end -}} &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt; {{ with .OutputFormats.Get &quot;rss&quot; -}} {{ printf ` &lt;link rel=&quot;%s&quot; type=&quot;%s&quot; href=&quot;%s&quot; title=&quot;%s&quot; /&gt; ` .Rel .MediaType.Type .Permalink $.Site.Title | safeHTML }} {{ end -}} {{- template &quot;_internal/schema.html&quot; . -}} {{- template &quot;_internal/opengraph.html&quot; . -}} {{- template &quot;_internal/twitter_cards.html&quot; . -}} &lt;link href=&quot;https://fonts.googleapis.com/css?family=Playfair+Display:700&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;{{ .Site.BaseURL }}css/normalize.css&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;{{ .Site.BaseURL }}css/main.css&quot; /&gt; {{- if isset .Site.Params &quot;customcss&quot; }} &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{{ .Site.BaseURL }}{{ .Site.Params.customCSS }}&quot; /&gt; {{ end }} &lt;link id=&quot;dark-scheme&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{{ .Site.BaseURL }}css/dark.css&quot; /&gt; {{- if isset .Site.Params &quot;customdarkcss&quot; }} &lt;link id=&quot;dark-scheme&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{{ .Site.BaseURL }}{{ .Site.Params.customDarkCSS }}&quot; /&gt; {{- end }} {{ if and (isset .Site.Params &quot;social&quot;) (isset .Site.Params &quot;feathericonscdn&quot;) (eq .Site.Params.featherIconsCDN true) -}} &lt;script src=&quot;https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js&quot;&gt;&lt;/script&gt; {{- else if or (isset .Site.Params &quot;social&quot;) (eq .Site.Params.mode &quot;auto&quot;) (eq .Site.Params.mode &quot;dark&quot;) -}} &lt;script src=&quot;{{ .Site.BaseURL }}js/feather.min.js&quot;&gt;&lt;/script&gt; {{ end }} &lt;script src=&quot;{{ .Site.BaseURL }}js/main.js&quot;&gt;&lt;/script&gt; {{- if isset .Site.Params &quot;customjs&quot; -}} {{- range .Site.Params.customJS }} &lt;script src=&quot;{{ $.Site.BaseURL }}{{ . }}&quot;&gt;&lt;/script&gt; {{- end }} {{- end }} &lt;script src=&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; Our final step is to include a simple JS snippet that Netlify provides us in their install docs. This will handle the redirection to the CMS admin dashboard upon successfully logging in. Add the following snippet to /themes/ink/layouts/partials/footer.html. &lt;script&gt; if (window.netlifyIdentity) { window.netlifyIdentity.on(&#39;init&#39;, (user) =&gt; { if (!user) { window.netlifyIdentity.on(&#39;login&#39;, () =&gt; { document.location.href = &#39;/admin/&#39;; }); } }); } &lt;/script&gt; The entire file should now look like: &lt;div class=&quot;footer wrapper&quot;&gt; &lt;nav class=&quot;nav&quot;&gt; &lt;div&gt; {{ dateFormat &quot;2006&quot; now }} {{ with .Site.Copyright }} {{ . | safeHTML }} | {{ end }} &lt;a href=&quot;https://github.com/knadh/hugo-ink&quot;&gt;Ink&lt;/a&gt; theme on &lt;a href=&quot;https://gohugo.io&quot;&gt;Hugo&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/div&gt; {{ template &quot;_internal/google_analytics_async.html&quot; . }} {{- with .Site.Params.Social -}} &lt;script&gt; feather.replace(); &lt;/script&gt; {{- end -}} &lt;script&gt; if (window.netlifyIdentity) { window.netlifyIdentity.on(&#39;init&#39;, (user) =&gt; { if (!user) { window.netlifyIdentity.on(&#39;login&#39;, () =&gt; { document.location.href = &#39;/admin/&#39;; }); } }); } &lt;/script&gt; Now let‚Äôs push up our changes: git add . git commit -m &quot;added Netlify Identity&quot; git push Now navigate to your Netlify url and add /admin at the end. For instance mine is https://reverent-liskov-4cbe35.netlify.app/admin. Netlify Identity Login Click on the ‚ÄúLogin with Netlify Identity‚Äù button. Then click on the ‚ÄúSign up‚Äù tab and fill out the form and click the ‚ÄúSign up‚Äù button. _*Make sure to use your actual email address as you will need to click a link to confirm your identity.**_ Netlify Identity Signup Open the email that is sent to you and confirm your email address. You should now be logged in and presented with the CMS admin dashboard. Netlify CMS Dashboard You can now edit and create new posts with Netlify CMS! Open up one of the posts and edit some of the content and click on the ‚ÄúPublish‚Äù button in the upper right hand corner. Then click ‚ÄúPublish Now‚Äù Netlify CMS Publish Button Clicking this button will send a webhook to Netlify which will begin to build and deploy the site automatically. Pretty slick üòé One thing to keep in mind, is that when you publish your site via the CMS, Netlify is creating git commits for you in the background. So if you make some changes to your site locally afterwards, make sure you run git pull to pull down the latest changes form your repo, otherwise your local copy and the version up on GitHub will be out of sync. 7.7 Integrating Zapier for automatic deploys I learned this neat trick from Flavio Copes. You can check his post here This next section includes using a service known as Zapier, which is an automation framework, that we will utilize to automatically deploy our site. You may be wondering why would we need this or what is the use case. Let me explain. More often that not most people write blog articles in advance and then schedule a publish date sometime in the future. For instance, you may want to publish a new blog post every 2 weeks, or once a month, and will often have several articles ready to go so that you have a ‚Äúbuffer‚Äù of content before you have to write more. Virtually every blogging system and cms allows this when you have a traditional monolithic architecture like WordPress or similar. However, since this is a static site and we do not have a backend, how can we accomplish this? The key is to use Zapier and Hugo‚Äôs publish date. Hugo has this feature built in already, where if you have a date set for one of your articles in the future, it will not build the page until that date. For example, if I set the date two weeks from today, Hugo will not build that page until then. We can trigger as many builds of our site as we want and that article will not show up until two weeks from today. Knowing this, we can then use Zapier to send a webhook to Netlify at whatever interval we want which will then trigger a new build. So if you are publishing every two weeks, you can setup Zapier to send a webhook every 2 weeks. You could even have Zapier send a webhook every single day if your schedule is inconsistent. That way you only have to worry about setting the correct date in the articles front-matter and the deployment and publishing cycle is handled for you automatically! For this tutorial, we are going to be setting up Zapier to send a webhook every single day. Before we can setup Zapier, however, we need to first configure Netlify to accept our Webhook from Zapier. 7.7.1 Netlify Webhook Setup Head back over to your Netlify dashboard and click on ‚ÄúSite settings‚Äù and then ‚ÄúBuild &amp; deploy‚Äù on the left sidebar. Scroll down to you see a ‚ÄúBuild hooks‚Äù section. Netlify Build Hooks Click the ‚ÄúAdd build hook‚Äù button. Give your hook a name and then save it. Netlify Build Hook Name Netlify will then give you a url for the webhook, like so: Netlify Build Hook Url Copy this down or keep this tab open as we will need this Url for Zapier. 7.7.2 Zapier Webhook Setup Head on over to Zapier and create a free account. After you are logged in, Go to this link to see how to configure a webhook POST request. Zapier Webhook Post Click on the ‚ÄúTry it‚Äù button. On the next screen, I setup mine to trigger on the weekends and at 7am. Zapier Webhook Post After clicking ‚ÄúSave and Continue,‚Äù click on the ‚ÄúTest Trigger‚Äù button. Zapier Test Trigger Then click on the 2nd section and add in the url from Netlify. I set my payload type to ‚ÄúRaw‚Äù Zapier Post Setup You can leave the rest of the fields as they are and then click ‚ÄúSave and continue‚Äù You should then be presented with a ‚ÄúTest action‚Äù screen. Click the ‚ÄúTest &amp; Continue‚Äù button. Zapier Test Action If all goes well you should see the following. Zapier Test Success Then click on the ‚ÄúTurn on Zap‚Äù button to enable it. Head back to your Netlify dashboard and see if the deploy was triggered. Click on ‚ÄúDeploys‚Äù at the top of the screen and check to see what the latest deploy is. It should say something like ‚ÄúDeploy triggered by hook: Zapier at 7am‚Äù Netlify Hook Success So now Zapier will send a webhook at 7am every single day and Netlify will deploy a fresh copy of your site at the same time. So all you have to do is enter the date in your articles front-matter on which you would like your article to be published live on your site and the rest is handle for you automatically! 7.8 GitHub Repo The completed project can be found here inside of Hugo-Blog/final GitHub Repo 7.9 Wrap up In this tutorial we learned how to create a Jamstack site using Hugo static site generator. We also integrated Netlify CMS to make it easy to update our content and deployed our site to Netlify. Finally, we setup Zapier to trigger automatic deploys on Netlify every day. "]]
